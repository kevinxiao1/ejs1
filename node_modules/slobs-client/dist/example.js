"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const main = async () => {
    if (!process.env.SLOBS_TOKEN) {
        throw new Error('Please define SLOBS_TOKEN environment variable for authentication');
    }
    const client = await index_1.SlobsClient.connect('http://127.0.0.1:59650/api', process.env.SLOBS_TOKEN);
    await client.request('ScenesService', 'getScenes').then(async (scenes) => {
        console.log('scenes', scenes);
        await client.request('ScenesService', 'activeSceneId').then(async (id) => {
            console.log('id', id);
            const activeSceneModel = scenes.find((scene) => scene.id === id);
            let activeScene = null;
            scenes.forEach((scene) => {
                scene.isActive = scene.id === activeSceneModel.id;
                if (scene.isActive)
                    activeScene = scene;
            });
            const audioSources = await client.request('AudioService', 'getSourcesForCurrentScene');
            for (let i = 0; i < audioSources.length; ++i) {
                // set the deflection (volume) to half
                console.log('setting deflection', audioSources[i]);
                const deflectionResult = await client.request(audioSources[i].resourceId, 'setDeflection', 1.0);
                console.log('The deflection result is ', deflectionResult);
            }
            const currentSceneItems = await client.request(activeScene.resourceId, 'getItems');
            console.log('Here are the scene items', currentSceneItems);
        });
        const sources = await client.request('SourcesService', 'getSources');
        console.log('Here are the sources', sources);
        for (let i = 0; i < sources.length; ++i) {
            const source = sources[i];
            const sourceSettings = await client.request(source.resourceId, 'getSettings');
            console.log('SOURCE SETTINGS', source.resourceId, sourceSettings);
        }
        await client.subscribe('ScenesService', 'sceneSwitched', (activeScene) => {
            console.log('activeScene', activeScene);
        });
        await client.subscribe('ScenesService', 'sceneAdded', (scene) => {
            console.log('scene', scene);
        });
        await client.subscribe('ScenesService', 'sceneRemoved', (scene) => {
            console.log('scene', scene);
        });
        await client.subscribe('SourcesService', 'sourceUpdated', (source) => {
            console.log('source', source);
        });
        await client.subscribe('ScenesService', 'itemAdded', (scenItem) => {
            console.log('scenItem', scenItem);
        });
        await client.subscribe('ScenesService', 'itemUpdated', (scenItem) => {
            console.log('scenItem', scenItem);
        });
        const sceneCollectionsSchema = await client.request('SceneCollectionsService', 'fetchSceneCollectionsSchema');
        console.log('THE SCENE COLLECTIONS SCHEMA', sceneCollectionsSchema);
        await new Promise((resolve) => setTimeout(() => resolve(), 1000));
        console.log(await client.request('SceneCollectionsService', 'fetchSceneCollectionsSchema'));
        await new Promise((resolve) => setTimeout(() => resolve(), 1000));
        console.log('again');
        console.log(await client.request('SceneCollectionsService', 'fetchSceneCollectionsSchema'));
    });
};
main().catch((err) => console.error(err));
