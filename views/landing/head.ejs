<title>Prototype</title>
    <meta charset="UTF-8">
        <script src="/javascript/bundle.js"></script>
        <script>
            var OBSWebSocket = require('obs-websocket-js')
            var express = require('express')
            // var app = express()
            // var router = express.Router();
            
        </script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <link rel="stylesheet" href="./css/design.css">
    <link rel="stylesheet" href="./css/buttondrag.css">

        <!-- Compiled and minified CSS -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

        <!-- Compiled and minified JavaScript -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pizzicato/0.6.4/Pizzicato.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <style>
        body,h1,h2,h3,h4,h5,h6 {font-family: "Lato", sans-serif}
        .w3-bar,h1,button {font-family: "Montserrat", sans-serif}
        .fa-anchor,.fa-coffee {font-size:200px}
        .ww {
            word-wrap: break-word;
        }

        .grid-container {
            display: grid;
            grid-template-columns: auto auto auto;
            background-color: #2196F3;
            padding: 10px;
        }
        .grid-item {
            background-color: rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(0, 0, 0, 0.8);
            padding: 20px;
            font-size: 30px;
            text-align: center;
        }
    </style>


    <script> 
        // var _eval = require('eval')
        // var myFunc = function() { console.log("I'm a stored function!"); };
        // // Turn it into a string
        // var myFuncString = myFunc.toString();
        // // Store it in your cookie
        // document.cookie = myFuncString;
        // // get your function back
        // var myCookieFunc = _eval(document.cookie);
        // // call it
        
        // console.log(myCookieFunc)
        // alert(myCookieFunc)

        localStorage.setItem("lastname", "Smith");

        var store = localStorage.getItem("lastname");

        alert(store)

        var testObject = { 'one': 1, 'two': 2, 'three': 3 };

        // Put the object into storage
        localStorage.setItem('testObject', JSON.stringify(testObject));

        // Retrieve the object from storage
        var retrievedObject = localStorage.getItem('testObject');

        console.log('retrievedObject: ', JSON.parse(retrievedObject));
        
            //PIZZICATO ---------------------------------------------------------------
        var count = 0;
        var sawtoothWave = new Pizzicato.Sound({ 
        source: 'wave',
        options: {
            type: 'sawtooth',
            volume : 0.05
        }
        });

        function volumechange() {
            var vol = document.getElementById('volume').value
            sawtoothWave.volume = vol / 1000;
        }

        function test() {
            // var stat = sawtoothWave
            // stat.on('play', function() {
            //     stat.pause();
            //     console.log('paused')
            // })
            // stat.on('pause', function() {
            //     stat.play();
            //     console.log('played')
            // })
            // console.log('clicked')
            // console.log(sawtoothWave)

            // var button = document.getElementsByClassName('btn-testplay')[0].value
            // console.log(button)

            // if (button == 'false' || count == 0) {
            //     sawtoothWave.play()
            //     document.getElementsByClassName('btn-testplay')[0].value = 'true'
            //     console.log(document.getElementsByClassName('btn-testplay')[0].value)
            //     count++
            // }
            // else{
            //     sawtoothWave.pause()
            //     document.getElementsByClassName('btn-testplay')[0].value = 'false'
            //     console.log(document.getElementsByClassName('btn-testplay')[0].value)
            //     count++
            // }

            var sound = new Howl({
                src: ['/audio/what.mp3']
            });

            sound.play();
        }

        // file play
        var sound = new Pizzicato.Sound({ 
            source: 'file',
            options: { 
                path: '/audio/what.mp3' ,
                volume : 0.5,
                attack : 0,
                release : 0,

            }
        }, function() {
            
            console.log('sound file loaded!');
        });

        function fvolumechange() {
            var vol = document.getElementById('fvolume').value
            sound.volume = vol / 1000;
        }

        function fplay() {
            sound.play()
        }
        function fpause() {
            sound.pause()
        }
        function fstop() {
            sound.stop()
        }

        // effects
        var decount = false
        var dicount = false
        var edelay = new Pizzicato.Effects.Delay({
            feedback: 0.1,
            time: 1,
            mix: 0.6
        });

        var edistort = new Pizzicato.Effects.Distortion({
        });
        function delay() {
            if (decount == false) {
                
                sound.addEffect(edelay);
                decount = true;
            }
            else{
                sound.removeEffect(edelay)
                decount = false
            }
            
        }
        function distort() {
           if (dicount == false) {
                sound.addEffect(edistort);
                dicount = true;
           }
           else{
               sound.removeEffect(edistort)
               dicount = false;
           }
        }

        function dischange() {
            if (dicount == true) {
                var ngain = document.getElementById('dgain').value
                sound.removeEffect(edistort)
                ngain = ngain / 100
                edistort = new Pizzicato.Effects.Distortion({
                    gain : ngain
                });
                sound.addEffect(edistort)
            }
            
        }

        // voice and effects 
        // var voice = new Pizzicato.Sound({
        //     source: 'input',
        //     options: { volume: 0.7 }
        // });

        // function vplay(params) {
        //     voice.play();
        // }
    </script>

    <script> // OBS WEBSOCKET -----------------------------------------------------------------

    
         // SAMPLE CONNECT AND REQUEST
        var module = require('obs-module');
        const obs = new OBSWebSocket();
        obs.connect({
            address: 'localhost:4444',
            password: 'kw912049'
        })
        .then(() => {
            console.log(`Success! We're connected & authenticated.`);
            obs.send('GetSceneList').then(data => {
                const sceneListDiv = document.getElementById('stran_list');

                data.scenes.forEach(scene => {
                    const sceneElement = document.createElement('option');
                    sceneElement.textContent = scene.name;
                    sceneElement.id = scene.name;
                    sceneElement.value = scene.name;

                    sceneListDiv.appendChild(sceneElement);
                });
            })
            return obs.send('GetMediaSourcesList');
            // return obs.send('GetSourceTypesList')
        })
            .then(data =>{
                const medialist = document.getElementById('media_list')
                data.mediaSources.forEach(source => {
                    console.log(`new source! its ${source.sourceName}`)  
                    const sceneElement = document.createElement('option');
                    sceneElement.textContent = source.sourceName;
                    sceneElement.id = source.sourceName;
                    sceneElement.value = source.sourceName

                    medialist.appendChild(sceneElement);
                })

            })

            // .then(data =>{
            //     data.types.forEach(type => {
            //         if (type.caps.canInteract) {
            //             console.log(`new source! its ${type.typeId}`)  
            //         }
            //     })
            // })

        // .then(data => {
        //     console.log(`${data.scenes.length} Available Scenes!`);

        //     data.scenes.forEach(scene => {
        //         if (scene.name !== data.currentScene) {
        //             console.log(`Found a different scene! Switching to Scene: ${scene.name}`);

        //             obs.send('SetCurrentScene', {
        //                 'scene-name': scene.name
        //             });
        //         }
        //     });
        // })
        .catch(err => { // Promise convention dicates you have a catch on every chain.
            console.log(err);
        });

        obs.on('SwitchScenes', data => {
            console.log(`New Active Scene: ${data.sceneName}`);
        });

            // You must add this handler to avoid uncaught exceptions.
            obs.on('error', err => {
                console.error('socket error:', err);
        });


        // SCENE SWITCHER -------------------------------
        function con() {
            obs.send('GetSceneList').then(data => {
                const sceneListDiv = document.getElementById('scene_list');

                data.scenes.forEach(scene => {
                    const sceneElement = document.createElement('button');
                    sceneElement.textContent = scene.name;
                    sceneElement.onclick = function() {
                    obs.send('SetCurrentScene', {
                        'scene-name': scene.name
                    });
                    };

                    sceneListDiv.appendChild(sceneElement);
                });
            })
        }

        // DECK PROTOTYPE FUNCTIONS --------------------------

        // Stream Start and Stop
        function streamstart() {
            obs.sendCallback('StartStreaming', (error) => {
            // Code here...
                console.log('stream started')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }
        function streamstop() {
            obs.sendCallback('StopStreaming', (error) => {
            // Code here...
                console.log('stream stopped')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }

        // Record Start and Stop

        function recstart() {
            obs.sendCallback('StartRecording', (error) => {
            // Code here...
                console.log('record started')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }
        function recstop() {
            obs.sendCallback('StopRecording', (error) => {
            // Code here...
                console.log('record stopped')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }

        function rec() {
            obs.sendCallback('StartStopRecording', (error) => {
            // Code here...
                obs.send('GetRecordingStatus').then(data => {
                    const button = document.getElementById('rec')
                    if (data.isRecording == false) {
                        button.className += "pulse"
                        console.log('record started')
                    }
                    else{
                        button.classList.remove("pulse")
                        console.log('record stopped')
                    }
                    console.log(data.isRecording)
                })
                if (error) {
                    console.error(error)
                }
            });

        }


        // Mic Toggle
        function togglemic() {
            obs.send('ToggleMute',{source: 'Mic/Aux'}).then(() => {
                obs.on('SourceMuteStateChanged', data => {
                    if (data.muted == true) {
                        console.log('mic muted')
                    }
                    else {
                        console.log('mic not muted')
                    }
                })
            }).catch((error) => {
                console.error(error);
            });
        }
        
        // Media play
        function vsauce() {
            obs.send('RestartMedia',{sourceName: 'vsauce'}).then(() => {
                console.log('vsauce')
            }).catch((error) => {
                console.error(error);
            });
        }

        function etu() {
            obs.send('RestartMedia',{sourceName: 'etu'}).then(() => {
                console.log('etu')
            }).catch((error) => {
                console.error(error);
            });
        }

        function end() {
            obs.send('RestartMedia',{sourceName: 'end'}).then(() => {
                console.log('etu')
            }).catch((error) => {
                console.error(error);
            });
        }
        function punch() {
            obs.send('RestartMedia',{sourceName: 'punch'}).then(() => {
                console.log('punch')
            }).catch((error) => {
                console.error(error);
            });
        }


        // ADD SCENE / MEDIA


        // Type Selector and Data Reader

        $(window).on('load', function() {
            
        });
        function foo() {
            alert('This works!');
        }
        
        $(document).ready(function() {
            $('input:radio[name="deckselect"]').change(
            function(){
                const trans = document.getElementById('stran_list')
                const media = document.getElementById('media_list')
                if (this.checked && this.id == "selecttrans") {
                    $('#media_list').attr("disabled",true)
                    $('#mediabutton').attr("disabled",true)
                    $('#stran_list').attr("disabled",false)
                    $('#transbutton').attr("disabled",false)
                    console.log('trans')
                }
                else{
                    $('#media_list').attr("disabled",false)
                    $('#mediabutton').attr("disabled",false)
                    $('#stran_list').attr("disabled",true)
                    $('#transbutton').attr("disabled",true)
                    console.log('media')
                }
            });
            readData();
            
        })
            
        function tscenelist() {
            obs.send('GetSceneList').then(data => {
                const sceneListDiv = document.getElementById('stran_list');

                data.scenes.forEach(scene => {
                    const sceneElement = document.createElement('option');
                    sceneElement.textContent = scene.name;
                    sceneElement.id = scene.name;

                    sceneListDiv.appendChild(sceneElement);
                });
            })
        }

        // ADD SCENES AND MEDIA
        //var btncount = 0;

        function addscene() {

            if (localStorage.getItem('arrBtn') === null) {
                alert('new array is coming')
                var btncount = 0;
                var arrBtn = [];
                var arrType = [];
            }
            else{
                var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
                var arrType = JSON.parse(localStorage.getItem('arrType'));
                var btncount = arrBtn.length;
            }
            const list = document.getElementById('stran_list')
            const text = list.options[list.selectedIndex].value;
            const box = document.getElementById('deckadd');

            const div = document.createElement('div');
            div.classList.add('col','s4','m4','l4')
            div.setAttribute('ondrop', 'drop(event)')
            div.setAttribute('ondragover', 'allowDrop(event)')
            div.setAttribute('id', 'div' + (btncount + 1))


            const sceneButton = document.createElement('button');
            sceneButton.setAttribute('id', 'drag' + (btncount + 1))
            sceneButton.setAttribute('draggable', 'true')
            sceneButton.setAttribute('ondragstart', 'drag(event)')

            sceneButton.textContent = text;
            sceneButton.classList.add('waves-effect', 'waves-light')
            // sceneButton.onclick
            alert(text);

            sceneButton.onclick = function() {
                obs.send('SetCurrentScene', {
                    'scene-name': text
                });
            }

            if (btncount == 0) {
                
                // add btn name and type, then store to localstorage. Then, read it when logging in by reading it.
            }
            arrBtn.push(text);
            arrType.push('trans')

            localStorage.setItem('arrBtn', JSON.stringify(arrBtn));
            localStorage.setItem('arrType', JSON.stringify(arrType));

            box.appendChild(div);
            div.appendChild(sceneButton);
            btncount = btncount + 1;
        }


        // ADD MEDIA

        function addmedia() {
            if (localStorage.getItem('arrBtn') === null) {
                alert('new array is coming')
                var btncount = 0;
                var arrBtn = [];
                var arrType = [];
            }
            else{
                var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
                var arrType = JSON.parse(localStorage.getItem('arrType'));
                var btncount = arrBtn.length;
            }
            const list = document.getElementById('media_list')
            const text = list.options[list.selectedIndex].value;
            const box = document.getElementById('deckadd');

            const div = document.createElement('div');
            div.classList.add('col','s4','m4','l4')
            //div.style.position = 'absolute';
            div.setAttribute('ondrop', 'drop(event)')
            div.setAttribute('ondragover', 'allowDrop(event)')
            div.setAttribute('id', 'div' + (btncount + 1))

            const sceneButton = document.createElement('button');
            sceneButton.setAttribute('id', 'drag' + (btncount + 1))
            sceneButton.setAttribute('draggable', 'true')
            sceneButton.setAttribute('ondragstart', 'drag(event)')

            sceneButton.textContent = text;
            sceneButton.classList.add('waves-effect', 'waves-light')
            // sceneButton.onclick
            alert(text);

            sceneButton.onclick = function() {
                obs.send('RestartMedia',{sourceName: text}).then(() => {
                    console.log(text)
                }).catch((error) => {
                    console.error(error);
                });
            }

            arrBtn.push(text);
            arrType.push('media');

            localStorage.setItem("arrBtn", JSON.stringify(arrBtn));
            localStorage.setItem("arrType", JSON.stringify(arrType));

            box.appendChild(div);
            div.appendChild(sceneButton);
            btncount = btncount + 1;
            alert(btncount)
        }


        function readData(){
            if (localStorage.getItem('arrBtn') !== null) {
                
                var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
                var arrType = JSON.parse(localStorage.getItem('arrType'));
                var btncount = arrBtn.length;
                const box = document.getElementById('deckadd');
                alert('loading saved deck consists of ' + btncount + ' buttons')

                for (let index = 0; index < btncount; index++) {
                    const div = document.createElement('div');
                    div.classList.add('col','s4','m4','l4')
                    //div.style.position = 'absolute';
                    div.setAttribute('ondrop', 'drop(event)')
                    div.setAttribute('ondragover', 'allowDrop(event)')
                    div.setAttribute('id', 'div' + (index + 1))

                    const sceneButton = document.createElement('button');
                    sceneButton.setAttribute('id', 'drag' + (index + 1))
                    sceneButton.setAttribute('draggable', 'true')
                    sceneButton.setAttribute('ondragstart', 'drag(event)')

                    sceneButton.textContent = arrBtn[index];
                    sceneButton.classList.add('waves-effect', 'waves-light')

                    if (arrType[index] == 'trans') {
                        sceneButton.onclick = function() {
                            obs.send('SetCurrentScene', {
                                'scene-name': arrBtn[index]
                            });
                        }
                    }
                    else if (arrType[index] == 'media') {
                        sceneButton.onclick = function() {
                        obs.send('RestartMedia',{sourceName: arrBtn[index]}).then(() => {
                            console.log(text)
                        }).catch((error) => {
                            console.error(error);
                        });
                        }
                    }
                    box.appendChild(div);
                    div.appendChild(sceneButton);
                }
            }
        }

        function allowDrop (ev) {
            ev.preventDefault();
        }

        function drag (ev) {
            ev.dataTransfer.setData ("src", ev.target.id);
        }

        function drop (ev) {
            ev.preventDefault ();
            var src = document.getElementById (ev.dataTransfer.getData ("src"));
            var srcParent = src.parentNode;
            var tgt = ev.currentTarget.firstElementChild;

            alert(src.id + ", " + tgt.id)

            ev.currentTarget.replaceChild (src, tgt);
            srcParent.appendChild (tgt);

            var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
            var arrType = JSON.parse(localStorage.getItem('arrType'));

            var indexDragged = src.id.charAt(src.id.length - 1) - 1
            var indexReplace = tgt.id.charAt(tgt.id.length - 1) - 1
            //alert(indexDragged + ", " + indexReplace)
          
            var BtnDragged = arrBtn[indexDragged]
            var TypeDragged = arrType[indexDragged]

            //alert(BtnDragged + " " + TypeDragged) 

            var BtnReplace = arrBtn[indexReplace]
            var TypeReplace = arrType[indexReplace];

            //alert(BtnReplace + " " + TypeReplace) 

            //alert(BtnReplace + " " + TypeReplace) 

            arrBtn[indexDragged] = BtnReplace;
            arrBtn[indexReplace] = BtnDragged;

            arrType[indexDragged] = TypeReplace;
            arrType[indexReplace] = TypeDragged;

            localStorage.setItem("arrBtn", JSON.stringify(arrBtn));
            localStorage.setItem("arrType", JSON.stringify(arrType));

            src.setAttribute('id', 'drag' + (parseInt(indexReplace) + 1))
            tgt.setAttribute('id', 'drag' + (parseInt(indexDragged) + 1))
        }

        

        // LANDING PAGE ------------------------------------
        // function redirect(id) {
        //     if (id == 'scenes') {
        //         console.log(id)
        //         router.get('/scenes', function (req, res) {
        //             res.render('landing/scenes')
        //         })

        //     }
        //     else if (id == 'mixer') {
        //         console.log(id)
        //         router.get('/scenes', function (req, res) {
        //             res.render('landing/mixer')
        //         })
        //     }
        //     else if (id == 'deck') {
        //         console.log(id)
        //         router.get('/scenes', function (req, res) {
        //             res.render('landing/sdeck')
        //         })
        //     }
        // }

        // DRAGABLE BUTTON

        function createButton() {
        var mousePosition;
        var offset = [0,0];
        var div;
        var isDown = false;

        div = document.createElement("button");
        div.style.position = "absolute";
        div.style.left = "0px";
        div.style.top = "0px";
        div.style.width = "100px";
        div.style.height = "100px";
        div.style.background = "red";
        div.style.color = "blue";

        document.body.appendChild(div);

        div.addEventListener('mousedown', function(e) {
            isDown = true;
            offset = [
                div.offsetLeft - e.clientX,
                div.offsetTop - e.clientY
            ];
        }, true);

        document.addEventListener('mouseup', function() {
            isDown = false;
        }, true);

        document.addEventListener('mousemove', function(event) {
            event.preventDefault();
            if (isDown) {
                mousePosition = {

                    x : event.clientX,
                    y : event.clientY

                };
                div.style.left = (mousePosition.x + offset[0]) + 'px';
                div.style.top  = (mousePosition.y + offset[1]) + 'px';
            }
        }, true);
    }

    </script>