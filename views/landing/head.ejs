<title>Prototype</title>
    <meta charset="UTF-8">
        <script src="/javascript/bundle.js"></script>
        <script defer>
            var OBSWebSocket = require('obs-websocket-js')
            var express = require('express')
        </script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
        <script src="https://cdn.bootcss.com/flv.js/1.5.0/flv.min.js"></script>
        
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js" integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="./css/design.css">
    <link rel="stylesheet" href="./css/buttondrag.css">

    <!-- <script src="/javascript/musicplayer.js"></script>
    <link rel="stylesheet" href="/css/musicplayer.css"> -->

        <!-- Compiled and minified CSS -->
        <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css"> -->

        <!-- Compiled and minified JavaScript -->
        <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script> -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pizzicato/0.6.4/Pizzicato.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <style>
        body,h1,h2,h3,h4,h5,h6 {font-family: "Lato", sans-serif}
        .w3-bar,h1,button {font-family: "Montserrat", sans-serif}
        .fa-anchor,.fa-coffee {font-size:200px}
        .ww {
            word-wrap: break-word;
        }

        .grid-container {
            display: grid;
            grid-template-columns: auto auto auto;
            background-color: #2196F3;
            padding: 10px;
        }
        .grid-item {
            background-color: rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(0, 0, 0, 0.8);
            padding: 20px;
            font-size: 30px;
            text-align: center;
        }
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vw;
            z-index: -1;
            pointer-events: none;
        }
    </style>


    <script> 
        


        // function drawVisualizer() {
        //     requestAnimationFrame(drawVisualizer);

        //     const bufferLength = analyserNode.frequencyBinCount;
        //     const dataArray = new Uint8Array(bufferLength)
        //     analyserNode.getByteFrequencyData(dataArray)
        //     const width = visualizer.width
        //     const height = visualizer.height
        //     const barWidth = width / bufferLength;

        //     const canvasContext = visualizer.getContext('2d')
        //     canvasContext.clearRect(0, 0, width, height)

        //     dataArray.forEach((item, index) => {
        //         const y = item / 255 * height / 2
        //         const x = barWidth * indexl

        //         canvasContext.fillStyle = 'rgb(0,0,0)'
        //         canvasContext.fillRect(x, height - y ,barWidth, y)
        //     })
        // }

        //drawVisualizer()

        
            //PIZZICATO ---------------------------------------------------------------
        var count = 0;
        var sawtoothWave = new Pizzicato.Sound({ 
        source: 'wave',
        options: {
            type: 'sawtooth',
            volume : 0.05
        }
        });

        function volumechange() {
            var vol = document.getElementById('volume').value
            sawtoothWave.volume = vol / 1000;
        }

        

        function fvolumechange() {
            var vol = document.getElementById('fvolume').value
            sound.volume = vol / 1000;
        }

        

        function fplay() {
            fsound.play()
        }
        function fpause() {
            fsound.pause()
        }
        function fstop() {
            fsound.stop()
        }

        // effects
        var decount = false
        var dicount = false
        var cocount = false;

        var ecompr = new Pizzicato.Effects.Compressor({
            threshold: -20,
            knee: 22,
            attack: 0.05,
            release: 0.05,
            ratio: 18
        })
        var edelay = new Pizzicato.Effects.Delay({
            feedback: 0.1,
            time: 1,
            mix: 0.6
        });

        var edistort = new Pizzicato.Effects.Distortion({
        });
        function delay() {
            if (decount == false) {
                
                fsound.addEffect(edelay);
                decount = true;
            }
            else{
                fsound.removeEffect(edelay)
                decount = false
            }
            
        }
        function distort() {
           if (dicount == false) {
                fsound.addEffect(edistort);
                dicount = true;
           }
           else{
               fsound.removeEffect(edistort)
               dicount = false;
           }
        }

        function comppressor(){
            if (cocount == false) {
                fsound.addEffect(ecompr)
                cocount = true;
            }
            else{
                fsound.removeEffect(ecompr)
                cocount = true;
            }
            
        }

        function dischange() {
            if (dicount == true) {
                var ngain = document.getElementById('dgain').value
                fsound.removeEffect(edistort)
                ngain = ngain / 100
                edistort = new Pizzicato.Effects.Distortion({
                    gain : ngain
                });
                fsound.addEffect(edistort)
            }
        }  

        
        // voice and effects 
        // var voice = new Pizzicato.Sound({
        //     source: 'input',
        //     options: { volume: 0.7 }
        // });

        // function vplay(params) {
        //     voice.play();
        // }


        var Element = document.querySelector('input');
        var img = document.querySelector('source');
        Element.addEventListener('change', function() {
            var url = URL.createObjectURL(Element.files[0]);
            img.src = url;
            console.log(url);
            var d=document.querySelector(".p");
            d.textContent+=url;
        });
    </script>

    <script> // OBS WEBSOCKET -----------------------------------------------------------------

    
         // SAMPLE CONNECT AND REQUEST
        var module = require('obs-module');
        const obs = new OBSWebSocket();
        


        // SCENE SWITCHER -------------------------------
        function obscon() {
            const ipaddress = document.getElementById('ipaddress').value
            const password = document.getElementById('password').value;
            
            obs.connect({
                address: ipaddress + ':4444',
                password: password
                // address: '192.168.0.37:4444',
                // password: 'kw912049'
            })
            .catch(err => { // Promise convention dicates you have a catch on every chain.
                log.error('Connection or Authentication failed', err);
            })
            .then(() => {
                console.log(`Success! We're connected & authenticated.`);
                obs.send('GetSceneList').then(data => {
                    // const sceneListDiv = document.getElementById('stran_list');
                    const sceneListDivButton = document.getElementById('scene_list');
                    data.scenes.forEach(scene => {
                        const sceneElement = document.createElement('option');
                        sceneElement.textContent = scene.name;
                        sceneElement.id = scene.name;
                        sceneElement.value = scene.name;

                        const sceneElementButton = document.createElement('button');
                        sceneElementButton.textContent = scene.name;
                        sceneElementButton.classList = 'col'
                        sceneElementButton.onclick = function() {
                            obs.send('SetCurrentScene', {
                                'scene-name': scene.name
                            });
                            };
                        // sceneListDiv.appendChild(sceneElement);
                        sceneListDivButton.appendChild(sceneElementButton);

                    });
                })
                return obs.send('GetMediaSourcesList');
                // return obs.send('GetSourceTypesList')
            })
                // .then(data =>{
                //     const medialist = document.getElementById('media_list')
                //     data.mediaSources.forEach(source => {
                //         console.log(`new source! its ${source.sourceName}`)  
                //         const sceneElement = document.createElement('option');
                //         sceneElement.textContent = source.sourceName;
                //         sceneElement.id = source.sourceName;
                //         sceneElement.value = source.sourceName

                //         medialist.appendChild(sceneElement);
                //     })
                //     return obs.send('GetSourcesList');
                // }).then(data =>{
                //     data.sources.forEach(source => {
                //         obs.send('GetMute', {
                //             source: source.name,
                //         }).then(status => {
                //             console.log(source.name + ' is ' + status.muted)
                //         })
                //     })
                // })
            

            // .then(data =>{
            //     data.types.forEach(type => {
            //         if (type.caps.canInteract) {
            //             console.log(`new source! its ${type.typeId}`)  
            //         }
            //     })
            // })

        // .then(data => {
        //     console.log(`${data.scenes.length} Available Scenes!`);

        //     data.scenes.forEach(scene => {
        //         if (scene.name !== data.currentScene) {
        //             console.log(`Found a different scene! Switching to Scene: ${scene.name}`);

        //             obs.send('SetCurrentScene', {
        //                 'scene-name': scene.name
        //             });
        //         }
        //     });
        // })


        obs.on('SwitchScenes', data => {
            console.log(`New Active Scene: ${data.sceneName}`);
        });

            // You must add this handler to avoid uncaught exceptions.
            obs.on('error', err => {
                console.error('socket error:', err);
        });
        }

        // DECK PROTOTYPE FUNCTIONS --------------------------

        // Stream Start and Stop
        function streamstart() {
            obs.sendCallback('StartStreaming', (error) => {
            // Code here...
                console.log('stream started')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }
        function streamstop() {
            obs.sendCallback('StopStreaming', (error) => {
            // Code here...
                console.log('stream stopped')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }

        // Record Start and Stop

        function recstart() {
            obs.sendCallback('StartRecording', (error) => {
            // Code here...
                console.log('record started')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }
        function recstop() {
            obs.sendCallback('StopRecording', (error) => {
            // Code here...
                console.log('record stopped')
            });
            obs.on('error', err => {
                console.error('socket error:', err);
            });
        }

        function rec() {
            obs.sendCallback('StartStopRecording', (error) => {
            // Code here...
                obs.send('GetRecordingStatus').then(data => {
                    const button = document.getElementById('rec')
                    if (data.isRecording == false) {
                        button.className += "pulse"
                        console.log('record started')
                    }
                    else{
                        button.classList.remove("pulse")
                        console.log('record stopped')
                    }
                    console.log(data.isRecording)
                })
                if (error) {
                    console.error(error)
                }
            });
        }


        // Mic Toggle
        function togglemic() {
            obs.send('ToggleMute',{source: 'Mic/Aux'}).then(() => {
                obs.on('SourceMuteStateChanged', data => {
                    if (data.muted == true) {
                        console.log('mic muted')
                    }
                    else {
                        console.log('mic not muted')
                    }
                })
            }).catch((error) => {
                console.error(error);
            });
        }
        
        // Media play
        function vsauce() {
            obs.send('RestartMedia',{sourceName: 'vsauce'}).then(() => {
                console.log('vsauce')
            }).catch((error) => {
                console.error(error);
            });
        }

        function etu() {
            obs.send('RestartMedia',{sourceName: 'etu'}).then(() => {
                console.log('etu')
            }).catch((error) => {
                console.error(error);
            });
        }

        function end() {
            obs.send('RestartMedia',{sourceName: 'end'}).then(() => {
                console.log('etu')
            }).catch((error) => {
                console.error(error);
            });
        }
        function punch() {
            obs.send('RestartMedia',{sourceName: 'punch'}).then(() => {
                console.log('punch')
            }).catch((error) => {
                console.error(error);
            });
        }


        // ADD SCENE / MEDIA


        // Type Selector and Data Reader


        var fsound
        
        
        $(document).ready(function() {
            $('input:radio[name="deckselect"]').change(
            function(){
                const trans = document.getElementById('stran_list')
                const media = document.getElementById('media_list')
                if (this.checked && this.id == "selecttrans") {
                    $('#media_list').attr("disabled",true)
                    $('#mediabutton').attr("disabled",true)
                    $('#stran_list').attr("disabled",false)
                    $('#transbutton').attr("disabled",false)
                    console.log('trans')
                }
                else{
                    $('#media_list').attr("disabled",false)
                    $('#mediabutton').attr("disabled",false)
                    $('#stran_list').attr("disabled",true)
                    $('#transbutton').attr("disabled",true)
                    console.log('media')
                }
            });
            readData();

            function handleFiles(event) {
                var files = event.target.files;
                $("#src").attr("src", URL.createObjectURL(files[0]));
                alert(URL.createObjectURL(files[0]))
                document.getElementById("audio").load();

                var soundfile = URL.createObjectURL(files[0]);
                var sound = new Pizzicato.Sound({ 
                    source: 'file',
                    options: { path: soundfile }
                }, function() {
                    alert('sound file loaded!');
                    sound.play();
                });

                fsound = new Pizzicato.Sound({ 
                    source: 'file',
                    options: { path: soundfile }
                }, function() {
                    alert('test sound file loaded!');
                });
            }
           

            document.getElementById("upload").addEventListener("change", handleFiles, false);

        })


        function svaluechange(){

            const list = document.getElementById('stran_list')
            const text = list.options[list.selectedIndex].value;

            var sname = document.getElementById("sname")
            var stype = document.getElementById("stype")
            sname.value = text;
            stype.value = "trans";
        }

        function openpreview(){
            obs.send('OpenProjector', {
                type: 'multiview',
                monitor: -1,
            })
            console.log('preview')
        }

        function mic() {
            // var voice = new Pizzicato.Sound({
            //     source: 'input',
            //     options: { 
            //         volume: 0.8,
            //         detached: 'false', 
            //         }
            // }, () => {
            //     voice.play()
            // });
            setupContext()
        }
            
        function tscenelist() {
            obs.send('GetSceneList').then(data => {
                const sceneListDiv = document.getElementById('stran_list');

                data.scenes.forEach(scene => {
                    const sceneElement = document.createElement('option');
                    sceneElement.textContent = scene.name;
                    sceneElement.id = scene.name;

                    sceneListDiv.appendChild(sceneElement);
                });
            })
        }

        // ADD SCENES AND MEDIA
        //var btncount = 0;

        function addscene() {

            if (localStorage.getItem('arrBtn') === null) {
                var btncount = 0;
                var arrBtn = [];
                var arrType = [];
            }
            else{
                var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
                var arrType = JSON.parse(localStorage.getItem('arrType'));
                var btncount = arrBtn.length;
            }
            const list = document.getElementById('stran_list')
            const text = list.options[list.selectedIndex].value;
            const box = document.getElementById('deckadd');

            const div = document.createElement('div');
            div.classList.add('col','s4','m4','l4')
            div.setAttribute('ondrop', 'drop(event)')
            div.setAttribute('ondragover', 'allowDrop(event)')
            div.setAttribute('id', 'div' + (btncount + 1))


            const sceneButton = document.createElement('button');
            sceneButton.setAttribute('id', 'drag' + (btncount + 1))
            sceneButton.setAttribute('draggable', 'true')
            sceneButton.setAttribute('ondragstart', 'drag(event)')

            sceneButton.textContent = text;
            sceneButton.classList.add('waves-effect', 'waves-light')
            // sceneButton.onclick
            sceneButton.onclick = function() {
                obs.send('SetCurrentScene', {
                    'scene-name': text
                });
            }

            if (btncount == 0) {
                
                // add btn name and type, then store to localstorage. Then, read it when logging in by reading it.
            }
            arrBtn.push(text);
            arrType.push('trans')

            localStorage.setItem('arrBtn', JSON.stringify(arrBtn));
            localStorage.setItem('arrType', JSON.stringify(arrType));

            box.appendChild(div);
            div.appendChild(sceneButton);
            btncount = btncount + 1;

        }

        


        // ADD MEDIA

        function addmedia() {
            if (localStorage.getItem('arrBtn') === null) {
                var btncount = 0;
                var arrBtn = [];
                var arrType = [];
            }
            else{
                var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
                var arrType = JSON.parse(localStorage.getItem('arrType'));
                var btncount = arrBtn.length;
            }
            const list = document.getElementById('media_list')
            const text = list.options[list.selectedIndex].value;
            const box = document.getElementById('deckadd');

            const div = document.createElement('div');
            div.classList.add('col','s4','m4','l4')
            //div.style.position = 'absolute';
            div.setAttribute('ondrop', 'drop(event)')
            div.setAttribute('ondragover', 'allowDrop(event)')
            div.setAttribute('id', 'div' + (btncount + 1))

            const sceneButton = document.createElement('button');
            sceneButton.setAttribute('id', 'drag' + (btncount + 1))
            sceneButton.setAttribute('draggable', 'true')
            sceneButton.setAttribute('ondragstart', 'drag(event)')

            sceneButton.textContent = text;
            sceneButton.classList.add('waves-effect', 'waves-light')
            // sceneButton.onclick

            sceneButton.onclick = function() {
                obs.send('RestartMedia',{sourceName: text}).then(() => {
                    console.log(text)
                }).catch((error) => {
                    console.error(error);
                });
            }

            arrBtn.push(text);
            arrType.push('media');

            localStorage.setItem("arrBtn", JSON.stringify(arrBtn));
            localStorage.setItem("arrType", JSON.stringify(arrType));

            box.appendChild(div);
            div.appendChild(sceneButton);
            btncount = btncount + 1;
            alert(btncount)
        }


        function readData(){
            if (localStorage.getItem('arrBtn') !== null) {
                
                var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
                var arrType = JSON.parse(localStorage.getItem('arrType'));
                var btncount = arrBtn.length;
                const box = document.getElementById('deckadd');
                alert('loading saved deck consists of ' + btncount + ' buttons')

                for (let index = 0; index < btncount; index++) {
                    const div = document.createElement('div');
                    div.classList.add('col','s4','m4','l4')
                    //div.style.position = 'absolute';
                    div.setAttribute('ondrop', 'drop(event)')
                    div.setAttribute('ondragover', 'allowDrop(event)')
                    div.setAttribute('id', 'div' + (index + 1))

                    const sceneButton = document.createElement('button');
                    sceneButton.setAttribute('id', 'drag' + (index + 1))
                    sceneButton.setAttribute('draggable', 'true')
                    sceneButton.setAttribute('ondragstart', 'drag(event)')

                    sceneButton.textContent = arrBtn[index];
                    sceneButton.classList.add('waves-effect', 'waves-light')

                    if (arrType[index] == 'trans') {
                        sceneButton.onclick = function() {
                            obs.send('SetCurrentScene', {
                                'scene-name': arrBtn[index]
                            });
                        }
                    }
                    else if (arrType[index] == 'media') {
                        sceneButton.onclick = function() {
                        obs.send('RestartMedia',{sourceName: arrBtn[index]}).then(() => {
                            console.log(text)
                        }).catch((error) => {
                            console.error(error);
                        });
                        }
                    }
                    box.appendChild(div);
                    div.appendChild(sceneButton);
                }
            }
        }

        function allowDrop (ev) {
            ev.preventDefault();
        }

        function drag (ev) {
            ev.dataTransfer.setData ("src", ev.target.id);
        }

        function drop (ev) {
            ev.preventDefault ();
            var src = document.getElementById (ev.dataTransfer.getData ("src"));
            var srcParent = src.parentNode;
            var tgt = ev.currentTarget.firstElementChild;

            alert(src.id + ", " + tgt.id)

            ev.currentTarget.replaceChild (src, tgt);
            srcParent.appendChild (tgt);

            var arrBtn = JSON.parse(localStorage.getItem('arrBtn'));
            var arrType = JSON.parse(localStorage.getItem('arrType'));

            var indexDragged = src.id.charAt(src.id.length - 1) - 1
            var indexReplace = tgt.id.charAt(tgt.id.length - 1) - 1
            //alert(indexDragged + ", " + indexReplace)
          
            var BtnDragged = arrBtn[indexDragged]
            var TypeDragged = arrType[indexDragged]

            //alert(BtnDragged + " " + TypeDragged) 

            var BtnReplace = arrBtn[indexReplace]
            var TypeReplace = arrType[indexReplace];

            //alert(BtnReplace + " " + TypeReplace) 

            //alert(BtnReplace + " " + TypeReplace) 

            arrBtn[indexDragged] = BtnReplace;
            arrBtn[indexReplace] = BtnDragged;

            arrType[indexDragged] = TypeReplace;
            arrType[indexReplace] = TypeDragged;

            localStorage.setItem("arrBtn", JSON.stringify(arrBtn));
            localStorage.setItem("arrType", JSON.stringify(arrType));

            src.setAttribute('id', 'drag' + (parseInt(indexReplace) + 1))
            tgt.setAttribute('id', 'drag' + (parseInt(indexDragged) + 1))
        }

        

        // LANDING PAGE ------------------------------------
        // function redirect(id) {
        //     if (id == 'scenes') {
        //         console.log(id)
        //         router.get('/scenes', function (req, res) {
        //             res.render('landing/scenes')
        //         })

        //     }
        //     else if (id == 'mixer') {
        //         console.log(id)
        //         router.get('/scenes', function (req, res) {
        //             res.render('landing/mixer')
        //         })
        //     }
        //     else if (id == 'deck') {
        //         console.log(id)
        //         router.get('/scenes', function (req, res) {
        //             res.render('landing/sdeck')
        //         })
        //     }
        // }

        // DRAGABLE BUTTON

        function createButton() {
        var mousePosition;
        var offset = [0,0];
        var div;
        var isDown = false;

        div = document.createElement("button");
        div.style.position = "absolute";
        div.style.left = "0px";
        div.style.top = "0px";
        div.style.width = "100px";
        div.style.height = "100px";
        div.style.background = "red";
        div.style.color = "blue";

        document.body.appendChild(div);

        div.addEventListener('mousedown', function(e) {
            isDown = true;
            offset = [
                div.offsetLeft - e.clientX,
                div.offsetTop - e.clientY
            ];
        }, true);

        document.addEventListener('mouseup', function() {
            isDown = false;
        }, true);

        document.addEventListener('mousemove', function(event) {
            event.preventDefault();
            if (isDown) {
                mousePosition = {

                    x : event.clientX,
                    y : event.clientY

                };
                div.style.left = (mousePosition.x + offset[0]) + 'px';
                div.style.top  = (mousePosition.y + offset[1]) + 'px';
            }
        }, true);
    }

    </script>


